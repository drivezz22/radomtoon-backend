generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique @db.VarChar(50)
  firstName       String
  lastName        String
  phone           String           @unique @db.VarChar(10)
  password        String
  profileImage    String?
  isAdmin         Boolean          @default(false)
  createdAt       DateTime         @default(now()) @db.Timestamp(0)
  updatedAt       DateTime         @updatedAt @db.Timestamp(0)
  supportProducts SupportProduct[]
}

model Creator {
  id                Int      @id @default(autoincrement())
  email             String   @unique @db.VarChar(50)
  firstName         String
  lastName          String
  phone             String   @unique @db.VarChar(10)
  password          String
  profileImage      String?
  identityImage     String
  isCreatorAcceptId Int
  createdAt         DateTime @default(now()) @db.Timestamp(0)
  updatedAt         DateTime @updatedAt @db.Timestamp(0)

  isCreatorAccept IsCreatorAcceptStatus @relation(fields: [isCreatorAcceptId], references: [id])
  creatorAbouts   CreatorAbout[]
  products        Product[]
}

model IsCreatorAcceptStatus {
  id       Int                       @id @default(autoincrement())
  status   IsCreatedAcceptStatusEnum
  creators Creator[]
}

enum IsCreatedAcceptStatusEnum {
  PENDING
  ACCEPTED
}

model CreatorAbout {
  creatorId Int     @id
  biography String? @db.Text
  website   String? @db.VarChar(50)

  creator Creator @relation(fields: [creatorId], references: [id])
}

model Product {
  id              Int      @id @default(autoincrement())
  creatorId       Int
  productDetailId Int
  productName     String   @db.VarChar(256)
  goal            Int
  deadline        DateTime
  isPublish       Boolean  @default(false)
  story           Bytes    @db.LongBlob
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  updatedAt       DateTime @updatedAt @db.Timestamp(0)

  creator           Creator            @relation(fields: [creatorId], references: [id])
  productStatus     ProductStatus[]
  productMilestones ProductMilestone[]
  productTiers      ProductTier[]
  supportProducts   SupportProduct[]
}

model ProductStatus {
  productId       Int      @id
  productStatusId Int
  totalFund       Int
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  updatedAt       DateTime @updatedAt @db.Timestamp(0)

  product       Product           @relation(fields: [productId], references: [id])
  productStatus ProductStatusType @relation(fields: [productStatusId], references: [id])
}

model ProductStatusType {
  id            Int                   @id @default(autoincrement())
  status        ProductStatusTypeEnum
  productStatus ProductStatus[]
}

enum ProductStatusTypeEnum {
  PENDING
  FAILED
  SUCCESS
}

model ProductMilestone {
  id              Int    @id @default(autoincrement())
  productId       Int
  milestoneRankId Int
  milestoneDetail String @db.Text

  product                   Product                    @relation(fields: [productId], references: [id])
  milestoneRank             MilestoneRank              @relation(fields: [milestoneRankId], references: [id])
  creatorMilestoneApprovals CreatorMilestoneApproval[]
}

model MilestoneRank {
  id                Int                @id @default(autoincrement())
  tier              MilestoneRankEnum
  productMilestones ProductMilestone[]
}

enum MilestoneRankEnum {
  RANK1
  RANK2
  RANK3
}

model CreatorMilestoneApproval {
  milestoneId      Int      @id
  approvalStatusId Int
  textDetail       String   @db.Text
  evidenceImage    String
  createdAt        DateTime @default(now()) @db.Timestamp(0)
  updatedAt        DateTime @updatedAt @db.Timestamp(0)

  milestone      ProductMilestone @relation(fields: [milestoneId], references: [id])
  ApprovalStatus ApprovalStatus   @relation(fields: [approvalStatusId], references: [id])
}

model ApprovalStatus {
  id                        Int                        @id @default(autoincrement())
  status                    ApprovalStatusEnum
  creatorMilestoneApprovals CreatorMilestoneApproval[]
}

enum ApprovalStatusEnum {
  PENDING
  FAILED
  SUCCESS
}

model ProductTier {
  id         Int    @id @default(autoincrement())
  tierRankId Int
  productId  Int
  price      Int
  tierDetail String @db.Text

  product  Product  @relation(fields: [productId], references: [id])
  tierRank TierRank @relation(fields: [tierRankId], references: [id])
}

model TierRank {
  id              Int              @id @default(autoincrement())
  tier            TierRankEnum
  productTiers    ProductTier[]
  supportProducts SupportProduct[]
}

enum TierRankEnum {
  RANK1
  RANK2
  RANK3
}

model SupportProduct {
  id               Int       @id @default(autoincrement())
  userId           Int
  productId        Int
  tierId           Int
  deliveryStatusId Int
  createdAt        DateTime  @default(now()) @db.Timestamp(0)
  updatedAt        DateTime  @updatedAt @db.Timestamp(0)
  deletedAt        DateTime? @db.Timestamp(0)

  user           User           @relation(fields: [userId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  tier           TierRank       @relation(fields: [tierId], references: [id])
  deliveryStatus deliveryStatus @relation(fields: [deliveryStatusId], references: [id])
}

model deliveryStatus {
  id              Int                @id @default(autoincrement())
  status          deliveryStatusEnum
  supportProducts SupportProduct[]
}

enum deliveryStatusEnum {
  PENDING
  DELIVERED
}
