generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique @db.VarChar(50)
  firstName       String
  lastName        String
  phone           String           @unique @db.VarChar(10)
  password        String
  profileImage    String?
  createdAt       DateTime         @default(now()) @db.Timestamp(0)
  updatedAt       DateTime         @updatedAt @db.Timestamp(0)
  supportProducts SupportProduct[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(50)
  firstName String
  lastName  String
  password  String
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Creator {
  id                Int      @id @default(autoincrement())
  email             String   @unique @db.VarChar(50)
  firstName         String
  lastName          String
  phone             String   @unique @db.VarChar(10)
  password          String
  profileImage      String?
  identityImage     String
  isCreatorAcceptId Int
  biography         String?  @db.Text
  website           String?  @db.VarChar(50)
  createdAt         DateTime @default(now()) @db.Timestamp(0)
  updatedAt         DateTime @updatedAt @db.Timestamp(0)

  isCreatorAccept IsCreatorAcceptStatus @relation(fields: [isCreatorAcceptId], references: [id])
  products        Product[]
}

model IsCreatorAcceptStatus {
  id       Int                       @id @default(autoincrement())
  status   IsCreatedAcceptStatusEnum
  creators Creator[]
}

enum IsCreatedAcceptStatusEnum {
  PENDING
  ACCEPTED
}

model Product {
  id              Int      @id @default(autoincrement())
  creatorId       Int
  productStatusId Int?
  productName     String   @db.VarChar(256)
  goal            Int
  deadline        DateTime
  isPublish       Boolean  @default(false)
  story           String   @db.MediumText
  totalFund       Int      @default(0)
  availableFund   Int      @default(0)
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  updatedAt       DateTime @updatedAt @db.Timestamp(0)

  creator       Creator        @relation(fields: [creatorId], references: [id])
  productStatus ProductStatus? @relation(fields: [productStatusId], references: [id])

  productMilestones ProductMilestone[]
  productTiers      ProductTier[]
  supportProducts   SupportProduct[]
}

model ProductStatus {
  id       Int               @id @default(autoincrement())
  status   ProductStatusEnum
  products Product[]
}

enum ProductStatusEnum {
  PENDING
  FAILED
  SUCCESS
  DELETED
}

model ProductMilestone {
  id                 Int      @id @default(autoincrement())
  productId          Int
  milestoneRankId    Int
  approvalStatusId   Int
  milestoneDetail    String   @db.Text
  evidencetextDetail String?  @db.Text
  evidenceImage      String?
  createdAt          DateTime @default(now()) @db.Timestamp(0)
  updatedAt          DateTime @updatedAt @db.Timestamp(0)

  approvalStatus ApprovalStatus @relation(fields: [approvalStatusId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  milestoneRank  MilestoneRank  @relation(fields: [milestoneRankId], references: [id])
}

model MilestoneRank {
  id                Int                @id @default(autoincrement())
  tier              MilestoneRankEnum
  productMilestones ProductMilestone[]
}

enum MilestoneRankEnum {
  RANK1
  RANK2
  RANK3
}

model ApprovalStatus {
  id               Int                @id @default(autoincrement())
  status           ApprovalStatusEnum
  ProductMilestone ProductMilestone[]
}

enum ApprovalStatusEnum {
  PENDING
  FAILED
  SUCCESS
}

model ProductTier {
  id         Int    @id @default(autoincrement())
  tierRankId Int
  productId  Int
  price      Int
  tierDetail String @db.Text

  product  Product  @relation(fields: [productId], references: [id])
  tierRank TierRank @relation(fields: [tierRankId], references: [id])
}

model TierRank {
  id              Int              @id @default(autoincrement())
  tier            TierRankEnum
  productTiers    ProductTier[]
  supportProducts SupportProduct[]
}

enum TierRankEnum {
  RANK1
  RANK2
  RANK3
}

model SupportProduct {
  id                   Int       @id @default(autoincrement())
  userId               Int
  productId            Int
  tierId               Int
  deliveryStatusId     Int
  alertProductStatus   Boolean   @default(false)
  alertCompletePayment Boolean   @default(false)
  createdAt            DateTime  @default(now()) @db.Timestamp(0)
  updatedAt            DateTime  @updatedAt @db.Timestamp(0)
  deletedAt            DateTime? @db.Timestamp(0)

  user           User           @relation(fields: [userId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  tier           TierRank       @relation(fields: [tierId], references: [id])
  deliveryStatus deliveryStatus @relation(fields: [deliveryStatusId], references: [id])
}

model deliveryStatus {
  id              Int                @id @default(autoincrement())
  status          deliveryStatusEnum
  supportProducts SupportProduct[]
}

enum deliveryStatusEnum {
  PENDING
  DELIVERED
}

model Profit {
  id          Int @id @default(autoincrement())
  totalProfit Int
}
